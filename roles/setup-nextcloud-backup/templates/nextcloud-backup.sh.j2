#!/bin/bash -e
##########################################################################
# This script was autogenerated by ansible from the template found
# in the https://galaxy.ansible.com/inofix/nextcloud role.
##########################################################################
#** Version: v1.0
#* You can use this script to create a manual backup or use it in
#* a cronjob to be executed on a regular basis.
##########################################################################


### === config - set by ansible === ###

# declare all host specific variables used

nextcloud_server_admin="{{ nextcloud__meta_user }}"
nextcloud_user="{{ nextcloud__user }}"
nextcloud_db_dump_user="{{ nextcloud__db_dump_user }}"
nextcloud_backup_user="{{ nextcloud__backup_user }}"
nextcloud_backup_group="{{ nextcloud__backup_group }}"

nextcloud_home="{{ nextcloud__home }}"
nextcloud_config="{{ nextcloud__config }}"
{% if nextcloud__data_is_extra %}
nextcloud_data="{{ nextcloud__data }}"
{% endif %}
nextcloud_db_name="{{ nextcloud__db_name }}"

# TODO: currently only local postgres is supported

nextcloud_backup_base="{{ nextcloud__backup_base }}"
nextcloud_backup_home="{{ nextcloud__backup_home }}"
nextcloud_backup_data="{{ nextcloud__backup_data }}"
nextcloud_backup_db="{{ nextcloud__backup_db }}"
nextcloud_backup_db_dump="{{ nextcloud__backup_db_dump }}"


### === code starts here === ###

# global defaults

toggle_verbose=1 # do not explain
toggle_dry_run=1 # do take action
toggle_interactive=1 # do not ask
rsync_verbose="" # be quiet as per default

# clean paths

nextcloud_home="$(echo ${nextcloud_home} | tr -s '/')"
nextcloud_config="$(echo ${nextcloud_config} | tr -s '/')"
{% if nextcloud__data_is_extra %}
nextcloud_data="$(echo ${nextcloud_data} | tr -s '/')"
{% endif %}
nextcloud_backup_base="$(echo ${nextcloud_backup_base} | tr -s '/')"
nextcloud_backup_home="$(echo ${nextcloud_backup_home} | tr -s '/')"
nextcloud_backup_data="$(echo ${nextcloud_backup_data} | tr -s '/')"
nextcloud_backup_db="$(echo ${nextcloud_backup_db} | tr -s '/')"
nextcloud_backup_db_dump="$(echo ${nextcloud_backup_db_dump} | tr -s '/')"


# generic functions

print_usage()
{
    echo "usage: $0 [options]"
}

print_help()
{
    print_usage
    grep "^#\* " $0 | sed 's;^#\*;;'
}

die()
{
    echo "$@"
    exit 1
}

error()
{
    print_usage
    echo ""
    die "Error: $@"
}

ask_first()
{
    question="$1"
    action="$2"
    interactive="$3"
    dry_run="$4"
    answer="y"
    if [ $interactive -eq 0 ] ; then
        echo "  - $question"
        read answer ; answer="${answer:0:1}" ; answer="${answer,Y}"
    fi
    if [ $dry_run -ne 0 ] && [ "${answer:-y}" == "y" ] ; then
        eval "$action"
    else
        echo "  NOT performing:"
        echo "    $action"
        echo ""
    fi
}


#* options:

for o in $@ ; do
    case "$o" in
#*  --dry-run|-n            Do nothing, only show what would happen...
        --dry-run|-n)
            toggle_verbose=0 # explain, (but do nothing, see toggle_dry_run)
            toggle_dry_run=0 # do nothing
            #toggle_interactive=1 # do not ask (irrelevant in dry_run)
        ;;
#*  --help|-h               Print this help.
        --help|-h)
            print_help
            exit 0
        ;;
#*  --interactive|-i        Ask before doing anything.
        --interactive|-i)
            toggle_verbose=0 # do explain (and ask, see toggle_interactive)
            #toggle_dry_run=1 # ask (see toggle_interactive)
            toggle_interactive=0 # ask..
        ;;
#*  --verbose|-v            Be explicit about any action.
        --verbose|-v)
            toggle_verbose=0 # be explicit
            rsync_verbose="-v"
            #toggle_dry_run=1 # take action here (resp. use default)
            #toggle_interactive=1 # irrelevant here (resp. use default)
        ;;
        *)
            error "option '$o' is not supported."
        ;;
    esac
done


# Execute some sanity checks

if [ $toggle_verbose -eq 0 ] ; then
    echo "$0:"
    echo "${0//?/-}"
    echo "Perfoming some sanity checks:"
    echo "  * this script needs special priviledges"
    echo "  * the nextcloud config file needs to be in place"
    echo "  * nextcloud should run normally"
    echo "  * there might be a separate data-dir"
    echo ""
fi

who_am_i=$(whoami)
if [ "$who_am_i" != "$nextcloud_server_admin" ] ; then
    die "Error: this script must be run as the priviledged user '$nextcloud_server_admin'"
fi

if [ ! -f "${nextcloud_config}" ] ||
    [ ! -e "${nextcloud_data}" ] ; then
    die "Error: nextcloud was not installed correctly, please verify the path! '${nextcloud_data}'"
fi

check_data=$( grep "^\s*'datadirectory' " ${nextcloud_config} | cut -d"'" -f4 )
if [ "${nextcloud_data%/}" != "${check_data%/}" ] ; then
    die "Error: other data dir used than configured, please check manually " \
        "${nextcloud_data%/} vs. ${check_data%/}"
fi

retval=0 ; grep -q "^  'maintenance' " ${nextcloud_config} || retval=$?
if [ $retval -ne 0 ] ; then
    die "Error: reading the config file '${nextcloud_config}'"
fi
check_mode=$( grep "^  'maintenance' " ${nextcloud_config} | cut -d" " -f5 )
if [ "${check_mode/,/}" == "true" ] ; then
    die "Error: the server was already in maintenance mode"
fi

if [ $toggle_verbose -eq 0 ] ; then

    echo "-> All checks finished successfully."
    echo ""
fi


# Prepare the target and do a first sync of the critical data

if [ $toggle_verbose -eq 0 ] ; then
    echo "The backup target directories will be created and a first sync is performed in order to reduce downtime later."
    echo "  * nextcloud installation: src:\"${nextcloud_home}/\", dest:\"${nextcloud_backup_home}\""
{% if nextcloud__data_is_extra %}
    echo "  * nextcloud user data: src:\"${nextcloud_data}/\", dest:\"${nextcloud_backup_data}\""
{% endif %}
    echo "  * nextcloud database: db:\"${nextcloud_db_name}\", dest:\"${nextcloud_backup_db_dump}\""
    echo ""
fi

if [ -d "${nextcloud_backup_home}" ] ; then
    if ! sudo -u ${nextcloud_backup_user} test -O "${nextcloud_backup_home}" ; then
        die "Error: the target dir ('${nextcloud_backup_home}') does not belong to the backup user ('${nextcloud_backup_user}')"
    fi
else
    ask_first "Do you want to create the backup directory for the nextcloud installation (the sync will fail if it is not present)? [Y/n]" \
        "mkdir -p \"${nextcloud_backup_home}\"" $toggle_interactive $toggle_dry_run
fi
ask_first "Do you want to prepare and live pre-sync the nextcloud installation at this point? [Y/n]" \
    "chown -R ${nextcloud_backup_user}:${nextcloud_backup_group} \"${nextcloud_backup_home}\" && \
     rsync $rsync_verbose -a --delete \"${nextcloud_home}/\" \"${nextcloud_backup_home}/\"" \
     $toggle_interactive $toggle_dry_run

{% if nextcloud__data_is_extra %}
if [ -d "${nextcloud_backup_data}" ] ; then
    if ! sudo -u ${nextcloud_backup_user} test -O "${nextcloud_backup_data}" ; then
        die "Error: the target dir ('${nextcloud_backup_data}') does not belong to the backup user ('${nextcloud_backup_user}')"
    fi
else
    ask_first "Do you want to create the backup directory for the nextcloud user data (the sync will fail if it is not present)? [Y/n]" \
        "mkdir -p \"${nextcloud_backup_data}\"" $toggle_interactive $toggle_dry_run
fi
ask_first "Do you want to prepare and live pre-sync the nextcloud user data at this point? [Y/n]" \
    "chown -R ${nextcloud_backup_user}:${nextcloud_backup_group} \"${nextcloud_backup_data}\" && \
     rsync $rsync_verbose -a --delete \"${nextcloud_data}/\" \"${nextcloud_backup_data}/\"" \
     $toggle_interactive $toggle_dry_run
{% endif %}

if [ -d "${nextcloud_backup_db}" ] ; then
    if ! sudo -u ${nextcloud_backup_user} test -O "${nextcloud_backup_db}" ; then
        die "Error: the target dir ('${nextcloud_backup_db}') does not belong to the backup user ('${nextcloud_backup_user}')"
    fi
else
    ask_first "Do you want to create the backup directory for the nextcloud database dump (the dump will fail if it is not present)? [Y/n]" \
        "mkdir -p \"${nextcloud_backup_db}\"" $toggle_interactive $toggle_dry_run
fi
ask_first "Do you want to prepare the directory nextcloud database dump at this point? [Y/n]" \
    "chown -R ${nextcloud_db_dump_user} \"${nextcloud_backup_db}\"" $toggle_interactive $toggle_dry_run


# Start the actual backup by entering maintenance mode,
# dump the db, resync everything, and get back to
# productive mode ASAP.

if [ $toggle_verbose -eq 0 ] ; then
    echo "Starting the actual backup now!"
    echo "  * setting nextcloud into maintenance mode"
    echo "  * dump the database"
    echo "  * re-sync the installation and user data"
    echo "  * re-setting nextcloud into productive mode"
    echo ""
fi

ask_first "Do you agree to set nextcloud into 'maintenance mode' (necessary for reliable backups)? [Y/n]" \
    "sed -i \"s;^  'maintenance' => false,;  'maintenance' => true,;\" \"${nextcloud_config}\"" \
    $toggle_interactive $toggle_dry_run

check_mode=$( grep "^  'maintenance' " ${nextcloud_config} | cut -d" " -f5 )
if [ "${check_mode/,/}" == "true" ] ; then
{% if nextcloud__db_type == 'pgsql' %}
    ask_first "Do you want to dump the database now? [Y/n]" \
        "sudo -i -u ${nextcloud_db_dump_user} pg_dump ${nextcloud_db_name} > \"${nextcloud_backup_db_dump}\"" \
         $toggle_interactive $toggle_dry_run
{% endif %}

    ask_first "Do you want to sync the nextcloud installation now? [Y/n]" \
        "rsync $rsync_verbose -a --delete \"${nextcloud_home}/\" \"${nextcloud_backup_home}/\"" \
         $toggle_interactive $toggle_dry_run
{% if nextcloud__data_is_extra %}
    ask_first "Do you want to sync the nextcloud user data now? [Y/n]" \
        "rsync $rsync_verbose -a --delete \"${nextcloud_data}/\" \"${nextcloud_backup_data}/\"" \
         $toggle_interactive $toggle_dry_run
{% endif %}

    ask_first "Do you agree to set nextcloud back into 'production mode'? [Y/n]" \
        "sed -i \"s;^  'maintenance' => true,;  'maintenance' => false,;\" \"${nextcloud_config}\"" \
        $toggle_interactive $toggle_dry_run
fi


# Clean up, i.e. make sure the remote backup can access the data

if [ $toggle_verbose -eq 0 ] ; then
    echo "Cleaning up:"
    echo "  * save the owner:group information to a meta file"
    echo "  * handing over the data to the backup user"
    echo ""
fi

ask_first "Do you agree to save owner:group infos to a file ('${nextcloud_backup_home%/}.perms')? [Y/n]" \
    "echo \"All files in production belong to '$nextcloud_user:$nextcloud_group', the permissions were not changed.\" > \"${nextcloud_backup_home%/}.perms\"" \
    $toggle_interactive $toggle_dry_run
{% if nextcloud__data_is_extra %}
ask_first "Do you agree to save owner:group infos to a file ('${nextcloud_backup_data%/}.perms')? [Y/n]" \
    "echo \"All files in production belong to '$nextcloud_user:$nextcloud_group', the permissions were not changed.\" > \"${nextcloud_backup_data%/}.perms\"" \
    $toggle_interactive $toggle_dry_run
{% endif %}
ask_first "Do you agree to hand the backup directory and its contents over to '${nextcloud_backup_user}:${nextcloud_backup_group}'? [Y/n]" \
    "chown -R ${nextcloud_backup_user}:${nextcloud_backup_group} \"${nextcloud_backup_base}\"" \
    $toggle_interactive $toggle_dry_run

