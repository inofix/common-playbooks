#!/bin/bash
###############################################################################
# NOTE: This file was written by Ansible. Any local changes will be lost on
# the next run.
###############################################################################
# This script is used by acme.sh to restart haproxy if a newer certificate
# was signed.
###############################################################################


if [ `id -u` -ne 0 ] ; then
    echo "This script has to be run by root."
    exit 3
fi

do_restart=1
fail=""
{% for item in acme__certificate.enabled %}
if [ -d "{{ acme__sh__config_dir }}/{{ acme__certificate.available[item].domain }}" ] ; then
    test -r "{{ acme__certificate.available[item].deploy.chain }}" || fail="${fail};{{ acme__certificate.available[item].deploy.chain }}"
    test -r "{{ acme__certificate.available[item].deploy.key }}" || fail="${fail};{{ acme__certificate.available[item].deploy.key }}"
    if [ "{{ acme__certificate.available[item].deploy.chain }}" -nt "{{ acme__sh__config_dir }}/{{ acme__certificate.available[item].domain }}.pem" ] ; then
        do_restart=0
        cat "{{ acme__certificate.available[item].deploy.key }}" >> "{{ acme__sh__config_dir }}/{{ acme__certificate.available[item].domain }}.pem"
        cat "{{ acme__certificate.available[item].deploy.chain }}" >> "{{ acme__sh__config_dir }}/{{ acme__certificate.available[item].domain }}.pem"
        ln -sf "{{ acme__sh__config_dir }}/{{ acme__certificate.available[item].domain }}.pem" "/etc/haproxy/certs/{{ acme__certificate.available[item].domain }}.pem" || fail="$fail;{{ acme__certificate.available[item].domain }}.pem"
    fi
else
    fail="${fail};{{ acme__certificate.available[item].domain }}"
fi
{% endfor %}

date -u +'%Y-%m-%d %H:%M:%S Restarting HAProxy:'

if [ -n "$fail" ] ; then
    echo "  failed cert signing for ${fail:1}."
fi
if [ "$do_restart" -ne 0 ] ; then
    echo "  no new certs found..."
    exit 2
fi

if [ -x "/bin/systemctl" ] ; then
    the_action="/bin/systemctl restart haproxy.service"
elif [ -x "/etc/init.d/haproxy" ] ; then
    the_action="/etc/init.d/haproxy restart"
else
    the_action="killall -SIGUSR2 haproxy"
fi

if $the_action ; then
    exit 0
    #echo "  HAProxy successfully restarted."
else
    echo "  failed to restart HAProxy."
    exit 1
fi


